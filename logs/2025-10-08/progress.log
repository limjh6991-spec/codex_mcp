[2025-10-08] 프로젝트 진행 로그

== 개요 ==
Codex + MCP 통합 VSCode 환경 기반 RoArm M3 Sim2Real 강화학습 파이프라인 초기 스켈레톤 구축 완료 후 확장 단계 진입.

== 주요 완료 항목 ==
1. 기본 프로젝트 구조
   - 디렉토리: src/, mcp_servers/, training/, configs/, scripts/, tests/, docs/
   - pyproject.toml 의존성(torch, sb3, gymnasium, etc.)
2. 환경 & 학습
   - DummyRoArmM3Env (sin/cos 관측 mock)
   - PPO 학습 스크립트(train_ppo.py) + VecEnv adapter + obs/action space 정의
3. 도메인 랜덤라이제이션
   - domain_randomization.yaml + DomainRandomizer (uniform 샘플링) + Dummy 환경 통합
4. MCP 서버 스켈레톤
   - isaac_controller_server.py: start/stop/list/apply_action + 로깅/타이밍 + joint tools(get_joint_state, set_joint_targets)
5. Isaac 관련 준비
   - isaac_roarm_env.py (조건부 import, joint API hook placeholder)
   - load_roarm.py (USD Stage 로드 프로토타입)
   - inspect_stage.py (USD joint 추출 & roarm_joints.yaml 자동 갱신)
6. Joint/Articulation 준비
   - isaac_joint_api.py 스켈레톤
   - 조인트 YAML placeholder (roarm_joints.yaml)
7. 테스트
   - Dummy env, randomizer, MCP schema, joint tools, inspect_stage placeholder, conftest 경로 설정
   - 현재 pytest 결과: 4 passed, 2 skipped (Isaac API 미사용 환경)
8. 문서화
   - README (MCP, Randomization, Stage 로더, Joint Tool, 추가 문서 링크)
   - ROADMAP, ISAAC_PRECHECK, STEP1_CHECKLIST, STEP1 joint 자동화
9. 스크립트
   - check_isaac_import.py, isaac_precheck.sh, run_mcp_isaac.sh, run_training.sh
10. 품질 개선
    - launch.json debugpy 전환
    - tasks.json schema 조정(404 가능성 인지)
    - conftest.py로 import 문제 해결

== 진행 중 (A 단계) ==
- Articulation 핸들 구조: JointAPI에 articulation 실제 연결 로직 TODO, isaac_roarm_env reset에서 Stage/articulation 획득 구현 예정.

== 다음 예정 순서(B~F) ==
B: Observation/Reward 재구성 (positions, velocities, error 기반)
C: Action/Limit Scaling (limits clamp, delta→absolute 변환)
D: Physics Randomization Hook (friction/material/solver params)
E: Reward 모듈 분리 (utils/reward.py)
F: Rollout 저장 구조 (rollouts/<timestamp>/meta.json, episode_###.npz)

== 남은 리스크 / 주의사항 ==
- 실제 Isaac articulation API 경로/메서드 버전 의존 → 구현 시 버전 확인 필요
- joint 이름 heuristic 추출 정확도 낮음 → 수동 교차검증 권장
- Reward/Action 스케일 미조정 상태라 실제 학습 전 성능 저하 가능
- Randomization 물리 반영 미구현 (현재 단순 메타 정보 수준)
- MCP server 아직 실제 Isaac env 바인딩 없음(추후 인스턴스 공유 필요)

== 제안 빠른 확인 체크리스트 ==
- [ ] USD Stage에서 실제 joint 이름 획득 후 roarm_joints.yaml 수정
- [ ] isaac_roarm_env.reset()에 Stage 로딩 코드 추가 후 simple step loop 동작 확인
- [ ] DomainRandomizer 출력 → 로깅 (debug) 추가
- [ ] MCP set_joint_targets → Isaac 연동 후 실제 pos 반영 테스트

== 실행 요약 명령 (참고) ==
python training/train_ppo.py --total_timesteps 1000
pytest -q
python sim/load_roarm.py --usd /abs/path/roarm.usd
python sim/inspect_stage.py --usd /abs/path/roarm.usd --update-joints

== 작성 시각 ==
2025-10-08T00:00:00Z (placeholder)

== Phase B 진행 업데이트 ==
2025-10-08T(B) Initial Observation/Reward 재구성 적용:
- isaac_roarm_env: 관측 벡터 형식 변경 → [q, dq, goal_delta] (18차원 placeholder)
- reward.py 신규 추가: tracking_error / smoothness / goal_bonus 조합형 reward compute_reward()
- step(): reward dict 기반 terminated 판정(within_tol), info에 tracking_error, smoothness 노출
- _get_obs(): JointAPI.get_state() 결과 positions/velocities 사용(fallback to 내부 상태) + goal_delta 포함
다음 TODO:
   * 실제 articulation 연동 후 positions/velocities 실데이터 대체
   * Dummy 환경에도 유사 reward 모듈 도입(추후 일관성)
   * RewardConfig 외부 주입 가능 훅(env init param) 마련 (Phase E에서 예정)

== Phase C 진행 (부분) ==
2025-10-08T(C) Action/Limit Scaling 1차 적용:
- 신규 util: src/utils/limits.py (load_joint_limits, clamp, delta 적용, normalize/denormalize)
- isaac_roarm_env.step(): apply_delta_with_limits 사용, action_clipped 플래그 info 반환
- reset(): joint_config에서 joints & config_path 기반 lazy limit 로드 (실패시 fallback)
남은 C 단계 TODO:
   * joint_config 전달 구조 개선 (config_path 주입 확인) / 실제 호출 예시 문서화
   * normalize/denormalize 정책 입력/출력 선택 적용(선택사항, 현재 미사용)
   * Dummy 환경에도 동일 clamp 레이어 적용 (정책 전이 대비)

== Phase D 진행 (부분) ==
2025-10-08T(D) Physics Randomization Hook 초안:
- 새 파일: src/utils/physics_randomizer.py (apply_physics_randomization)
- isaac_roarm_env.apply_domain_randomization override → base 호출 후 sample() 추가 호출로 physics/robot/environment 섹션 로깅 적용
- 현재는 로깅 기반 stub; Isaac 실제 API 연동 시 world/prim 기반 set_* 호출로 대체 예정
남은 D 단계 TODO:
   * sample() 이중 호출 방지(현재 base.apply → apply(); override 내 sample() 추가 호출) → DomainRandomizer에 최근 sample 캐시 옵션 도입 예정
   * 물리 파라미터 키 표준화 및 매핑 테이블 문서화
   * Isaac 불가 환경에서 skip 로그 추가(현재는 조용히 pass)

== Phase E 진행 (부분) ==
2025-10-08T(E) Reward 모듈 분리/Composer:
- reward.py 리팩터: RewardConfig + 다중 term (tracking, smoothness, action_penalty, goal_bonus) + RewardComposer
- Isaac 환경 step()에서 RewardComposer 사용, info에 *_term 및 핵심 metrics만 노출
- Backward compatibility: compute_reward 함수 유지
남은 E 단계 TODO:
   * Action penalty weight 튜닝 및 config 외부 주입 (env param)
   * Episode 누적 reward breakdown 수집(F 단계 rollout 로거와 연계)
   * Dummy 환경도 동일 composer 사용으로 통일성 확보(선택)

== Phase F 진행 (부분) ==
2025-10-08T(F) Rollout Logger 초안:
- 신규: src/utils/rollout_logger.py (RolloutLogger: meta.json + ep_XXXXX.npz 저장)
- train_ppo.py --record-rollouts 플래그 추가 (수동 루프 기반 episode 로깅)
- 테스트: test_rollout_logger.py 기본 구조 검증
남은 F 단계 TODO:
   * SB3 Callback 형태로 통합 (학습 중에도 자동 저장)
   * reward_terms 자동 추출 (composer introspection)
   * Isaac 환경 randomization sample meta에 포함 (sample 캐시 필요)
   * (완료) DomainRandomizer sample 캐시 도입 → isaac_env 물리 randomization 이중 샘플 제거

== Isaac Integration Increment ==
2025-10-08T(I1) JointAPI 확장:
 - get_state(): positions/velocities 반환 인터페이스 확립 (Isaac 미가용 시 빈 리스트 graceful fallback)
 - apply_delta(): delta 명령 placeholder 적용, Isaac 미연동 시 no-op 메타 반환
 - list_joints(): future 실제 joint name 열거 주석 추가
 - 테스트: test_joint_api_fallback.py 추가 → Isaac 미환경  경로에서 6 passed / 2 skipped 전체 테스트 유지
 - 영향: isaac_roarm_env._get_obs()가 이제 구조적으로 JointAPI state dict 사용 (추후 실제 articulation 연동 시 교체 용이)
다음 단계:
   * articulation handle 획득 로직(prim path 검색 + ArticulationView) 실제 구현
   * apply_delta에서 joint limits 반영 (limits util 재사용) 및 drive target set
   * physics_randomizer 실제 PhysX 파라미터 매핑
2025-10-08T(I2) Articulation Handle & Joint Listing 고도화:
 - JointAPI.attach: world 전달 시 ArticulationView 생성 시도, created 플래그 반환
 - list_joints: get_joints() / get_joint_names() 동적 탐색 로직 추가 (fallback safe)
 - apply_delta: limit-aware 주석 및 clamp hook 위치 명시, 예외 안전 처리
 - isaac_roarm_env.reset: world 전달하여 attach 경로 활성화
 - 향후: 실제 Isaac 환경에서 prim 존재 검증 + joint limits 주입 후 apply_delta clamp 적용 예정
2025-10-08T(I3) Joint State Fetch 구현:
 - JointAPI.get_state: articulation 존재 & Isaac 가용 시 get_joint_positions / get_joint_velocities 동적 조회
 - 안전성: getattr + callable 검사 → 예외 시 빈 리스트 반환으로 graceful fallback 유지
 - 반환 형 보정: numpy/torch 텐서 가능성 대비 tolist() → list() 변환
 - 영향: isaac_roarm_env._get_obs()가 실데이터 사용 가능 (positions, velocities)
 - 다음 (I4): apply_delta에 limits 주입 + set_joint_position_targets(new_target) 실제 호출 및 clamp 적용
2025-10-08T(I4) Delta Clamp & Env 연동:
 - JointAPI.apply_delta: (deltas, lower, upper) 시그니처 확장, saturated 플래그 + target 반환
 - IsaacRoArmM3Env.step: JointAPI 경유 delta 적용 → articulation pos 반환 시 그대로 상태 반영, 실패/미가용 시 기존 fallback 유지
 - MCP apply_action 경로도 limits-aware 호출
 - 준비: 추후 실제 Isaac 환경에서 set_joint_position_targets 성공 시 관절 상태 동기 오차 검증 추가 예정
2025-10-08T(I5) Physics 매핑 설계 & Stub 확장:
 - physics_randomizer: PHYSICS_KEY_MAPPING 도입 (solver_position/velocity_iterations)
 - _apply_physics_params/_apply_robot_params/_apply_env_params 구조화 및 report dict 누적
 - 예외 안전 처리: 개별 섹션 try/except → 상세 오류 키 기록
 - 현재 robot/env는 기록 위주 placeholder (friction, damping scaling hook 자리 확보)
 - 다음: 실제 articulation & link prim 순회하여 joint drive damping / collider friction 적용 함수 구현 예정
2025-10-08T(I6) Physics Randomizer Smoke Test:
 - test_physics_randomizer.py 추가: solver iteration / robot / env 키 report 구조 검증
 - report에 physics_applied_detail 키 존재 확인
 - 총 테스트: 7 passed / 2 skipped (Isaac 의존 테스트 제외)
2025-10-08T(I7) Rollout Meta 확장:
 - RolloutLogger.meta.json에 physics_report 필드 추가(현재 Dummy= None)
 - train_ppo --record-rollouts 경로에 randomization/physics_report 전달 구조 준비
2025-10-08T(I8) RolloutCallback 도입:
 - src/utils/rollout_callback.py: BaseCallback 기반 episode 저장 자동화
 - train_ppo.py: --record-callback-rollouts 플래그 추가, 수동 모드와 상호 배타
 - 향후: 다중 env 지원(episode aggregation) & reward term 자동 추출 예정
2025-10-08T(I9) Policy Inference Tool & Docs:
 - isaac_controller_server.policy_infer: lazy SB3 PPO 로딩 + observation 기반 action 예측
 - README: policy_infer 사용법, callback 기반 rollouts 옵션 비교, meta.json physics_report/randomization 필드 문서화
 - schema(): policy_infer tool 항목 추가
 - 향후: observation shape mismatch 감지 및 Isaac 관측 변환(카메라/포즈) 파이프라인 연계 예정

== Isaac GUI 시각화 가능 여부 (현재 단계 분석) ==
결론: 현재 저장소 상태만으로는 Isaac Sim GUI에서 RoArm M3 로봇이 화면에 나타나지 않음.

원인 요약:
 - `IsaacRoArmM3Env._load_stage_once()` 가 실제 USD 참조(add_reference) 수행 없음 (단순 플래그).
 - 로봇 USD 파일 경로/참조 추가 로직 부재 → Stage 상 prim '/World/roarm' 미존재 → JointAPI.attach 시 PRIM_NOT_FOUND 흐름.
 - 시뮬레이션/렌더링 루프(`world.step(render=True)` 반복) 미구현.

필수 보강 항목:
 1. 로봇 USD 경로 확보 (예: assets/roarm/roarm_m3.usd) 및 환경 초기화 시 참조 추가.
 2. Stage prim 존재 확인 후 ArticulationView 생성 재시도(tries > 1, sleep backoff).
 3. reset 직후 warm-up 렌더 스텝 (예: 2~5회 world.step(render=True)).
 4. 옵션: headless 모드 분기 (GUI 비활성화 시 render=False 유지).
 5. 향후 link/joint 명세 로깅 (attach 성공 시 joint count 출력) → 관절 매핑 검증.

개념 실행 스니펫(별도 스크립트):
   SimulationApp({...}); World(); add_reference_to_stage(ROBOT_USD, "/World/roarm"); ArticulationView 추가; 루프에서 world.step(render=True)

향후 적용 계획(권장 순서):
   (a) `_load_stage_once()` 내 환경변수 또는 인자 기반 USD 참조 주입
   (b) attach 재시도 횟수/간격 설정값화
   (c) 초기 warm-up step + attach 결과 로그 구조화(JSON)
   (d) 실패 시 info에 stage_load_error / prim_missing 주입

리스크:
   - USD 경로/버전 불일치 → prim prefix 변경 필요.
   - Isaac API 버전 차이로 ArticulationView 생성 시점에 stage update 필요 가능(World.reset 후 호출 권장).
   - 멀티 로봇 확장 대비 prim path 파라미터화 필요.

다음 액션(요청 시 수행 가능):
   - `IsaacRoArmM3Env` 생성자에 `robot_usd_path` 추가
   - `_load_stage_once()`에서 참조 추가 + 존재 검증 로그
   - 간단한 `scripts/view_roarm.py` 작성하여 GUI 시각 확인 루프 제공


